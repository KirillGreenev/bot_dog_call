import time
import random
import requests
import telebot
from telebot import types
from config import BOT_TOKEN
from parser_group import get_members_group
from multiprocessing import Process, Queue
from repository import (create_connection, create_table,
                        select_all_prediction, close_connection,
                        insert_table, update_prediction, delite_prediction)

sql_create_prediction_table = """
        CREATE TABLE IF NOT EXISTS prediction (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT NOT NULL
        );
        """

bot = telebot.TeleBot(BOT_TOKEN)
conn = create_connection("mydatabase.db")
create_table(conn, sql_create_prediction_table)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}
update_id_prediction = {}


@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!')

@bot.message_handler(commands=['add'])
def add_prediction_handler(message):
    user_states[message.from_user.id] = 'waiting_for_add'
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å")


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_add')
def ask_text_add(message):
    text = message.text
    last_id = insert_table(conn, "INSERT INTO prediction(text) VALUES(?)", (text,))
    if last_id is not None:
        bot.send_message(message.chat.id, f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. Id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è {last_id}")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    del user_states[message.from_user.id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è


@bot.message_handler(commands=['upd'])
def update_prediction_handler(message):
    user_states[message.from_user.id] = 'waiting_for_id_update'
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ id –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_id_update')
def ask_id_update(message):
    try:
        id = int(message.text)
        user_states[message.from_user.id] = 'waiting_for_text_update'
        update_id_prediction[message.from_user.id] = id
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    except ValueError:
        bot.send_message(message.chat.id, "id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_text_update')
def ask_text_update(message):
    id = update_id_prediction[message.from_user.id]
    text = message.text

    if update_prediction(conn, id, text):
        bot.send_message(message.chat.id, "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å  –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

    del user_states[message.from_user.id]
    del update_id_prediction[message.from_user.id]


@bot.message_handler(commands=['del'])
def delite_prediction_handler(message):
    user_states[message.from_user.id] = 'waiting_for_id_delite'
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ id –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_id_delite')
def ask_id_delite(message):
    try:
        id = int(message.text)
        if delite_prediction(conn, id):
            bot.send_message(message.chat.id, "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

        del user_states[message.from_user.id]
    except ValueError:
        bot.send_message(message.chat.id, "id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")


@bot.message_handler(commands=['—Å–æ–∑—ã–≤', 'all', 'call'])
def dog_call(message):
    try:
        q = Queue()
        new_process = Process(target=get_members_group, args=(message.chat.id, q), daemon=True)
        new_process.start()
        members_group = q.get(timeout=4)
        new_process.join()
    except:
        members_group = '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã!'
    bot.send_message(message.chat.id,
                     f"–°–æ–±–∞—á–∏–π —Å–æ–∑—ã–≤!! –ê–£–£–£–£–£–£üê∫üåô\n{members_group}\n–ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –¥–∏–∑–ª–∞–π–∫–∞, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–¥–µ—Ç–µ –≤ —Å–æ–∑–≤–æ–Ω, —ç—Ç–æ –≤–∞–∂–Ω–æ")


@bot.message_handler(commands=['–∫–æ—Ç—ç', 'cat'])
def get_cat(message):
    respons = requests.get('https://api.thecatapi.com/v1/images/search')
    if respons.status_code == 200:
        bot.send_photo(message.chat.id, respons.json()[0]["url"])
    else:
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –∫–æ—Ç–∏–∫–æ–º :(')


@bot.message_handler(commands=['pr', '—Å—É–¥—å–±–∞', '–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'])
def get_prediction(message):
    if conn is not None:
        r = select_all_prediction(conn)
        if len(r) == 0:
            bot.send_message(message.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Ç—É, –∏—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /menu")
        else:
            random.seed(time.time())
            ms = random.choice(r)
            name = '@' + message.from_user.username if message.from_user.username else message.from_user.first_name
            bot.send_message(message.chat.id, "üîÆ")
            bot.send_message(message.chat.id, f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {name}:\n{ms}")
    else:
        bot.send_message(message.chat.id, "–£–ø—Å —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º")

@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å")
    button2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å")
    button3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å")
    markup.add(button1, button2, button3)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å":
        add_prediction_handler(message)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å":
        update_prediction_handler(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—å":
        delite_prediction_handler(message)


if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
    finally:
        close_connection(conn)
