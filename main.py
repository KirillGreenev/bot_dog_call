import random
import requests
import telebot
from telebot import types
from config import BOT_TOKEN
from parser_group import get_members_group
from multiprocessing import Process, Queue
from repository import create_connection,create_table, select_all_prediction, close_connection

sql_create_prediction_table = """
        CREATE TABLE IF NOT EXISTS prediction (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT NOT NULL
        );
        """

bot = telebot.TeleBot(BOT_TOKEN)
conn = create_connection("mydatabase.db")
create_table(conn, sql_create_prediction_table)



@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!')


@bot.message_handler(commands=['—Å–æ–∑—ã–≤', 'all'])
def dog_call(message):
    try:
        q = Queue()
        new_process = Process(target=get_members_group, args=(message.chat.id, q), daemon=True)
        new_process.start()
        members_group = q.get(timeout=4)
        new_process.join()
    except:
        members_group = '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã!'
    bot.send_message(message.chat.id,
                     f"–°–æ–±–∞—á–∏–π —Å–æ–∑—ã–≤!! –ê–£–£–£–£–£–£üê∫üåô\n{members_group}\n–ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –¥–∏–∑–ª–∞–π–∫–∞, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–¥–µ—Ç–µ –≤ —Å–æ–∑–≤–æ–Ω, —ç—Ç–æ –≤–∞–∂–Ω–æ")


@bot.message_handler(commands=['–∫–æ—Ç—ç', 'cat'])
def get_cat(message):
    respons = requests.get('https://api.thecatapi.com/v1/images/search')
    if respons.status_code == 200:
        bot.send_photo(message.chat.id, respons.json()[0]["url"])
    else:
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –∫–æ—Ç–∏–∫–æ–º :(')

@bot.message_handler(commands=['pr','—Å—É–¥—å–±–∞', '–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'])
def get_prediction(message):
    if conn is not None:
        r = select_all_prediction(conn)
        if len(r) == 0:
            bot.send_message(message.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Ç—É, –Ω–æ –º—ã –∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–º")
        else:
            ms = random.choice(r)
            name = '@' + message.from_user.username if message.from_user.username else message.from_user.first_name
            bot.send_message(message.chat.id, f"üîÆ")
            bot.send_message(message.chat.id, f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {name}:\n{ms}")
    else:
        bot.send_message(message.chat.id, "–£–ø—Å —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º")


if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
        close_connection(conn)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
